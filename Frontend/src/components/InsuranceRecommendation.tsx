import { Shield, Heart, AlertCircle, CheckCircle2, ArrowRight, CloudRain, Wind, Droplets } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from './ui/card'
import { Button } from './ui/button'
import type { DocumentJsonData } from '../api/types'

interface InsuranceRecommendationProps {
  jsonData: DocumentJsonData | null
  recommendationData?: {
    address?: {
      text: string
      type: string
      region: string
    }
    place_of_origin?: {
      text: string
      region: string
    }
    recommended_packages?: Array<{
      name: string
      reason: string
      priority: number
    }>
  }
}

interface Recommendation {
  id: string
  title: string
  reason: string
  benefits: string[]
  icon: React.ReactNode
  color: string
  bgColor: string
}

export default function InsuranceRecommendation({ jsonData, recommendationData }: InsuranceRecommendationProps) {
  // Debug logging
  console.log('üîç InsuranceRecommendation props:', { 
    jsonData: jsonData ? 'present' : 'null', 
    recommendationData,
    hasRecommendations: recommendationData?.recommended_packages?.length
  })

  if (!jsonData) {
    return (
      <Card className="h-full flex items-center justify-center border-warning-200 bg-warning-50">
        <CardContent className="p-6 text-center">
          <AlertCircle className="w-12 h-12 mx-auto mb-3 text-warning-600" />
          <p className="text-warning-900 font-semibold">Ch∆∞a c√≥ d·ªØ li·ªáu ph√¢n t√≠ch</p>
        </CardContent>
      </Card>
    )
  }

  // Analyze document and generate recommendations
  const getRecommendations = (): Recommendation[] => {
    const recommendations: Recommendation[] = []
    
    // üéØ PRIORITY 1: Use AI recommendation from backend (thi√™n tai, b√£o l≈©)
    if (recommendationData?.recommended_packages && recommendationData.recommended_packages.length > 0) {
      console.log('‚úÖ Using AI recommendations:', recommendationData.recommended_packages.length)
      recommendationData.recommended_packages.forEach((pkg) => {
        // Map package name to icon and benefits
        let icon = <Shield className="w-6 h-6" />
        let benefits: string[] = []
        
        if (pkg.name.toLowerCase().includes('ng·∫≠p l·ª•t') || pkg.name.toLowerCase().includes('l≈©')) {
          icon = <Droplets className="w-6 h-6" />
          benefits = [
            'B·ªìi th∆∞·ªùng thi·ªát h·∫°i do ng·∫≠p l·ª•t, l≈© qu√©t',
            'Chi tr·∫£ chi ph√≠ s·ª≠a ch·ªØa t√†i s·∫£n',
            'H·ªó tr·ª£ t√°i thi·∫øt sau thi√™n tai',
            'B·∫£o v·ªá t√†i s·∫£n trong m√πa m∆∞a b√£o'
          ]
        } else if (pkg.name.toLowerCase().includes('b√£o') || pkg.name.toLowerCase().includes('gi√≥')) {
          icon = <Wind className="w-6 h-6" />
          benefits = [
            'B·∫£o v·ªá nh√† c·ª≠a kh·ªèi h∆∞ h·∫°i do b√£o',
            'Chi tr·∫£ s·ª≠a ch·ªØa m√°i nh√†, c·ª≠a s·ªï, t∆∞·ªùng',
            'B·ªìi th∆∞·ªùng thi·ªát h·∫°i do gi√≥ m·∫°nh',
            'H·ªó tr·ª£ x√¢y d·ª±ng l·∫°i sau b√£o'
          ]
        } else if (pkg.name.toLowerCase().includes('ph∆∞∆°ng ti·ªán') || pkg.name.toLowerCase().includes('xe')) {
          icon = <CloudRain className="w-6 h-6" />
          benefits = [
            'B·∫£o v·ªá xe m√°y, √¥ t√¥ kh·ªèi ng·∫≠p n∆∞·ªõc',
            'Chi tr·∫£ s·ª≠a ch·ªØa ƒë·ªông c∆° b·ªã h∆∞ h·ªèng',
            'B·ªìi th∆∞·ªùng h·ªá th·ªëng ƒëi·ªán b·ªã ng·∫•m n∆∞·ªõc',
            'H·ªó tr·ª£ c·ª©u h·ªô khi xe b·ªã ng·∫≠p'
          ]
        }
        
        recommendations.push({
          id: `ai-${pkg.name.toLowerCase().replace(/\s+/g, '-')}`,
          title: pkg.name,
          reason: pkg.reason,
          benefits,
          icon,
          color: 'text-blue-600',
          bgColor: 'bg-blue-50'
        })
      })
      
      return recommendations
    }
    
    console.log('‚ö†Ô∏è No AI recommendations, checking recommendationData:', recommendationData)
    
    // If AI returned data but no packages (e.g., South region), still return empty to show region info
    if (recommendationData?.address || recommendationData?.place_of_origin) {
      console.log('‚ÑπÔ∏è AI analyzed region but no packages recommended')
      return []
    }
    
    // PRIORITY 2: Fallback to document type analysis
    const docType = jsonData.document_type?.toLowerCase() || ''
    
    // Personal Accident Insurance
    if (docType.includes('tai n·∫°n') || docType.includes('accident') || docType.includes('lao ƒë·ªông')) {
      recommendations.push({
        id: 'accident',
        title: 'B·∫£o hi·ªÉm tai n·∫°n c√° nh√¢n',
        reason: 'Trong h·ªì s∆° c√≥: Lao ƒë·ªông c√¥ng tr√¨nh / R·ªßi ro ngh·ªÅ nghi·ªáp cao',
        benefits: [
          'B·ªìi th∆∞·ªùng tai n·∫°n do ngh·ªÅ nghi·ªáp',
          'H·ªó tr·ª£ vi·ªán ph√≠ v√† ph·∫´u thu·∫≠t',
          'Tr·ª£ c·∫•p thu nh·∫≠p khi ngh·ªâ vi·ªác',
          'B·∫£o v·ªá 24/7 m·ªçi l√∫c m·ªçi n∆°i'
        ],
        icon: <Shield className="w-6 h-6" />,
        color: 'text-trust-600',
        bgColor: 'bg-trust-50'
      })
    }

    // Health Insurance
    if (docType.includes('s·ª©c kh·ªèe') || docType.includes('health') || docType.includes('y t·∫ø')) {
      recommendations.push({
        id: 'health',
        title: 'B·∫£o hi·ªÉm s·ª©c kh·ªèe to√†n di·ªán',
        reason: 'Ph√°t hi·ªán nhu c·∫ßu chƒÉm s√≥c s·ª©c kh·ªèe trong h·ªì s∆°',
        benefits: [
          'Chi tr·∫£ vi·ªán ph√≠ kh√¥ng gi·ªõi h·∫°n',
          'Kh√°m ch·ªØa b·ªánh n·ªôi tr√∫ / ngo·∫°i tr√∫',
          'X√©t nghi·ªám v√† ch·∫©n ƒëo√°n h√¨nh ·∫£nh',
          'Ph·∫´u thu·∫≠t v√† ƒëi·ªÅu tr·ªã ƒë·∫∑c bi·ªát'
        ],
        icon: <Heart className="w-6 h-6" />,
        color: 'text-red-600',
        bgColor: 'bg-red-50'
      })
    }

    // If no specific type detected, recommend based on extracted entities
    if (recommendations.length === 0) {
      // Check for high-risk indicators
      const people = jsonData.people || []
      const organizations = jsonData.organizations || []
      
      if (people.length > 0 || organizations.length > 0) {
        recommendations.push({
          id: 'general',
          title: 'B·∫£o hi·ªÉm b·∫£o v·ªá to√†n di·ªán',
          reason: 'D·ª±a tr√™n ph√¢n t√≠ch h·ªì s∆° v√† th√¥ng tin c√° nh√¢n',
          benefits: [
            'B·∫£o v·ªá t√†i ch√≠nh cho gia ƒë√¨nh',
            'H·ªó tr·ª£ chi ph√≠ y t·∫ø',
            'B·∫£o v·ªá t√†i s·∫£n c√° nh√¢n',
            'T∆∞ v·∫•n v√† h·ªó tr·ª£ 24/7'
          ],
          icon: <Shield className="w-6 h-6" />,
          color: 'text-trust-600',
          bgColor: 'bg-trust-50'
        })
      }
    }

    return recommendations
  }

  const recommendations = getRecommendations()
  
  // Display address/region info if available (prioritize place_of_origin)
  const regionInfo = recommendationData?.place_of_origin || recommendationData?.address
  
  console.log('üìä Recommendations:', recommendations.length, 'Region Info:', regionInfo)

  // If we have no recommendations but do have region analysis
  if (recommendations.length === 0 && regionInfo) {
    console.log('‚ÑπÔ∏è Showing region info without recommendations (likely South Vietnam)')
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-trust-100 rounded-xl flex items-center justify-center">
            <Shield className="w-6 h-6 text-trust-600" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Ph√¢n t√≠ch v√πng mi·ªÅn</h2>
            <p className="text-gray-600">D·ª±a tr√™n ph√¢n t√≠ch AI t·ª´ h·ªì s∆° c·ªßa b·∫°n</p>
          </div>
        </div>

        {/* Region Info Card */}
        <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900 mb-1">
                  {recommendationData?.place_of_origin ? 'üè° Qu√™ qu√°n' : 'üìç ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫'}: 
                  <span className="ml-2 text-blue-700">{regionInfo.text}</span>
                </p>
                <p className="text-xs text-gray-600">
                  V√πng mi·ªÅn: <span className="font-semibold">
                    {regionInfo.region === 'Bac' ? 'Mi·ªÅn B·∫Øc' : 
                     regionInfo.region === 'Trung' ? 'Mi·ªÅn Trung' : 
                     regionInfo.region === 'Nam' ? 'Mi·ªÅn Nam' : 'Ch∆∞a x√°c ƒë·ªãnh'}
                  </span>
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-success-200 bg-success-50">
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              <CheckCircle2 className="w-6 h-6 text-success-600 flex-shrink-0 mt-1" />
              <div>
                <h3 className="font-semibold text-success-900 mb-1">
                  Khu v·ª±c c√≥ m·ª©c ƒë·ªô r·ªßi ro th·∫•p
                </h3>
                <p className="text-sm text-success-700 mb-3">
                  D·ª±a tr√™n ph√¢n t√≠ch, khu v·ª±c c·ªßa b·∫°n c√≥ m·ª©c ƒë·ªô r·ªßi ro thi√™n tai th·∫•p. 
                  Tuy nhi√™n, ch√∫ng t√¥i v·∫´n khuy·∫øn ngh·ªã b·∫°n xem x√©t c√°c g√≥i b·∫£o hi·ªÉm c∆° b·∫£n 
                  ƒë·ªÉ b·∫£o v·ªá t√†i s·∫£n v√† gia ƒë√¨nh.
                </p>
                <Button size="sm" className="bg-trust-600 hover:bg-trust-700 text-white">
                  Xem g√≥i b·∫£o hi·ªÉm c∆° b·∫£n
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-trust-50 to-blue-50 border-trust-200">
          <CardContent className="p-6">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-white rounded-xl flex items-center justify-center shadow-sm">
                <Heart className="w-6 h-6 text-trust-600" />
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-gray-900 mb-1">
                  C·∫ßn t∆∞ v·∫•n th√™m v·ªÅ b·∫£o hi·ªÉm?
                </h4>
                <p className="text-sm text-gray-600 mb-3">
                  ƒê·ªôi ng≈© chuy√™n gia c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7 ƒë·ªÉ t√¨m g√≥i b·∫£o hi·ªÉm ph√π h·ª£p nh·∫•t.
                </p>
                <Button size="sm" className="bg-trust-600 hover:bg-trust-700 text-white">
                  Chat v·ªõi chuy√™n gia
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // If no recommendations and no region info - show generic message
  if (recommendations.length === 0) {
    return (
      <Card className="border-warning-200 bg-warning-50">
        <CardContent className="p-6">
          <div className="flex items-start gap-3">
            <AlertCircle className="w-6 h-6 text-warning-600 flex-shrink-0 mt-1" />
            <div>
              <h3 className="font-semibold text-warning-900 mb-1">
                Ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω
              </h3>
              <p className="text-sm text-warning-700">
                AI c·∫ßn th√™m th√¥ng tin t·ª´ h·ªì s∆° ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã b·∫£o hi·ªÉm ph√π h·ª£p. 
                Vui l√≤ng ki·ªÉm tra l·∫°i t√†i li·ªáu ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-3">
        <div className="w-10 h-10 bg-trust-100 rounded-xl flex items-center justify-center">
          <Shield className="w-6 h-6 text-trust-600" />
        </div>
        <div>
          <h2 className="text-2xl font-bold text-gray-900">G√≥i b·∫£o hi·ªÉm ph√π h·ª£p</h2>
          <p className="text-gray-600">D·ª±a tr√™n ph√¢n t√≠ch AI t·ª´ h·ªì s∆° c·ªßa b·∫°n</p>
        </div>
      </div>

      {/* Region Info Card */}
      {regionInfo && (
        <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900 mb-1">
                  {recommendationData?.place_of_origin ? 'üè° Qu√™ qu√°n' : 'üìç ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫'}: 
                  <span className="ml-2 text-blue-700">{regionInfo.text}</span>
                </p>
                <p className="text-xs text-gray-600">
                  V√πng mi·ªÅn: <span className="font-semibold">
                    {regionInfo.region === 'Bac' ? 'Mi·ªÅn B·∫Øc' : 
                     regionInfo.region === 'Trung' ? 'Mi·ªÅn Trung' : 
                     regionInfo.region === 'Nam' ? 'Mi·ªÅn Nam' : 'Ch∆∞a x√°c ƒë·ªãnh'}
                  </span>
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6">
        {recommendations.map((rec) => (
          <Card 
            key={rec.id} 
            className="border-2 border-trust-200 hover:border-trust-400 hover:shadow-trust-lg transition-all duration-300"
          >
            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-4">
                  <div className={`w-14 h-14 ${rec.bgColor} rounded-2xl flex items-center justify-center ${rec.color}`}>
                    {rec.icon}
                  </div>
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <CardTitle className="text-xl">{rec.title}</CardTitle>
                      <span className="px-3 py-1 bg-trust-100 text-trust-700 text-xs font-medium rounded-full">
                        Khuy·∫øn ngh·ªã
                      </span>
                    </div>
                    <div className="flex items-start gap-2 text-sm text-gray-600">
                      <AlertCircle className="w-4 h-4 mt-0.5 flex-shrink-0" />
                      <span>{rec.reason}</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              <div>
                <h4 className="font-semibold text-gray-900 mb-3">Ph·∫°m vi quy·ªÅn l·ª£i:</h4>
                <div className="space-y-2">
                  {rec.benefits.map((benefit, idx) => (
                    <div key={idx} className="flex items-start gap-2">
                      <CheckCircle2 className="w-5 h-5 text-success-600 flex-shrink-0 mt-0.5" />
                      <span className="text-gray-700">{benefit}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex gap-3 pt-2">
                <Button className="flex-1 bg-trust-600 hover:bg-trust-700 text-white">
                  Li√™n h·ªá t∆∞ v·∫•n
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
                <Button variant="outline" className="flex-1 border-trust-300 text-trust-700 hover:bg-trust-50">
                  Xem chi ti·∫øt
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Card className="bg-gradient-to-r from-trust-50 to-blue-50 border-trust-200">
        <CardContent className="p-6">
          <div className="flex items-start gap-4">
            <div className="w-12 h-12 bg-white rounded-xl flex items-center justify-center shadow-sm">
              <Heart className="w-6 h-6 text-trust-600" />
            </div>
            <div className="flex-1">
              <h4 className="font-semibold text-gray-900 mb-1">
                C·∫ßn t∆∞ v·∫•n th√™m v·ªÅ b·∫£o hi·ªÉm?
              </h4>
              <p className="text-sm text-gray-600 mb-3">
                ƒê·ªôi ng≈© chuy√™n gia c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7 ƒë·ªÉ t√¨m g√≥i b·∫£o hi·ªÉm ph√π h·ª£p nh·∫•t.
              </p>
              <Button size="sm" className="bg-trust-600 hover:bg-trust-700 text-white">
                Chat v·ªõi chuy√™n gia
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
